#!/usr/bin/env python

import numpy
from PIL import Image
import math
import sys
import argparse
import os
import urllib2

help_msg = """

Download and create PNG of the SRTM data for N 38 W 97 to N 39 W 96,
in 1 big tile containing the point [x,y] provided:

`hgt2png --download 96.432 38.123`

Download and create a PNG of the data within a bounding box:

`hgt2png --bbox -96.8 38.2 -96.6 38.5`

Use, resize or reuse a file you already downloaded:

`hgt2png --file N38W097.hgt --bbox -96.8 38.2 -96.6 38.5`

Render a square area only:

`hgt2png --square --file N38W097.hgt --bbox -96.8 38.2 -96.6 38.5`

"""


parser = argparse.ArgumentParser()
parser.add_argument('-f', '--file', 
        help='path to local file')
parser.add_argument('-d', '--download',
        nargs=2, type=float, default=False,
        help='download from point, requires lon lat args: -d -122.5 37.5')
parser.add_argument('-u', '--url', default=False, 
        help='url to download (can be inferred from geography with --download)')
parser.add_argument('-b', '--bbox', nargs=4, type=float, 
        help='two coordinate pairs, min lon, min lat, max lon, max lat')
parser.add_argument('-s', '--square', action='store_true', 
        help='to generate a square png based on the bbox')
parser.add_argument('-w', '--width', default=3601, 
        help='maybe use if other than srtm 1')
parser.add_argument('-im', '--image-format', default='png', 
        help='ie raw jpeg')
parser.add_argument('-ex', '--exportable', action='store_true', 
        help='georeferenced tif ie for TileMill')

args = parser.parse_args()

def download (url):
    fname = url.split('/')[-1]
    req = urllib2.urlopen(url)
    CHUNK = 16 * 1024
    if fname in os.listdir('.'):
        return fname.replace('.zip', '')
    with open(fname, 'wb') as fp:
        while True:
            chunk = req.read(CHUNK)
            if not chunk: break
            fp.write(chunk)
    os.system("unzip " + fname)
    return fname.replace('.zip', '')

def dehumanize_filename (n):
    n = n.replace("W", ' -')
    n = n.replace("N", ' ')
    n = n.replace("S", ' -')
    n = n.replace("E", ' ')
    n = n.replace(".hgt", '')
    return [float(k) for k in n.split()][::-1]


def process (fname):
    bbox = args.bbox
    p = dehumanize_filename(fname)
    #low left, up right
    if bbox:
        ll = args.bbox[0:2]
        ur = args.bbox[2:]
    else:
        ll = p
        ur = [ ll[0] + 1, ll[1] + 1 ]

    x0 = ll[0] - p[0]
    x1 = ur[0] - p[0]

    y0 = p[1] + 1 - ur[1]
    y1 = p[1] + 1 - ll[1]

    print x0, y0, x1, y1

    minx = int(math.floor( x0 * args.width ))
    miny = int(math.floor( y0 * args.width ))

    maxx = int(math.ceil( x1 * args.width ))
    maxy = int(math.ceil( y1 * args.width ))

    irange = int(maxx - minx)
    jrange = int(maxy - miny)

    square_width = min(irange, jrange)

    if args.square:
        irange = square_width
        jrange = square_width

    # >i2 bigendian 2 byte signed int
    image = numpy.fromfile(fname, dtype='>i2').reshape(args.width, args.width)
    # for memory constrained situation:
    # image = numpy.memmap(_f, dtype='>i2', mode="r+", shape=(3601,3601))

    def trans (x, y, i, j, arr_in, arr_out, neg=True):
        h = arr_in[y][x]
        if h < 0:
            if neg:
                a = 21
                h = abs(h)
            else:
                h = 0
                a = 255
        else:
            a = 255
        cm = int(round( (abs(h) - math.floor(abs(h))) * 100 ))
        arr_out[i, j] = ( h / 256, h % 256, cm, a) # or (h/256, h%256, cm, 255)
            

    i, j = 0, 0

    img = Image.new('RGBA', (int(irange), int(jrange)), (0,0,0,255))
    im = img.load()

    x = minx
    y = miny

    while j < jrange:
        while i < irange:
            trans(x, y, i, j, image, im)
            i += 1
            x += 1
        i = 0
        j += 1
        x = minx
        y += 1

    fname_pre = ''
    if args.bbox:
        fname_pre = 'part-'+'-'.join([str(s) for s in [minx, miny, maxx, maxy]]) + '-'
        if args.square:
            fname_pre += '-square-'
    img_fname = fname_pre + fname.replace('hgt', args.image_format)
    img.save(img_fname)
    if args.exportable:
        os.system("gdal_translate -a_nodata 0 -of GTiff \
            -a_srs EPSG:4326 -a_ullr \
            %(x0)f %(y1)f %(x1)f %(y0)f \
            %(img_fname)s \
            %(tiff_out)stiff" % { "img_fname": img_fname,
                  "tiff_out": img_fname.replace(args.image_format, ''),
                  "x0":ll[0],
                  "y0":ll[1],
                  "x1":ur[0],
                  "y1":ur[1] })

def region_for (pt):
  regions = r = [ 
    [[-126, 38], [-111.00001, 50]], # region 1
    [[-111, 38], [-97.00001, 50]], # 2
    [[-97, 38], [-83.00001, 50]], # 3
    [[-123, 28], [-100.00001, 37.9999]], # 4
    [[-100, 25], [-83.00001, 37.9999]], # 5
    [[-83, 17], [-64, 48]], # 6
    [[-180, 0], [-129, 60]] # 7
  ]

  def within (i):
    if (pt[0] >= r[i][0][0] and pt[0] <= r[i][1][0]):
      if (pt[1] >= r[i][0][1] and pt[1] <= r[i][1][1]):
        return i+1
      return False
    return False

  for i, b in enumerate(regions):
    hit = within (i)
    if hit: return hit
  return False

def url_for (pt):
  r = region_for(pt)
  if not r: 
      return False
  base_url = "http://dds.cr.usgs.gov/srtm/version2_1/SRTM1/Region_0{0}/N{1}W{2}.hgt.zip"
  lon = str(int(math.ceil(abs(pt[0]))))
  if len(lon) < 3:
    lon = '0'+lon
  lat = str(int(math.floor(pt[1])))
  return base_url.format(str(r), lat, lon)

if args.bbox and not args.file:
    print url_for(args.bbox[0:2])
    fname = download(url_for(args.bbox[0:2] ))
    process(fname)
elif args.download:
    fname = download(url_for(args.download))
    process(fname)
elif args.url:
    fname = download(args.url)
    process(fname)
elif args.file:
    fname = args.file
    process(fname)
else:
    print help_msg
